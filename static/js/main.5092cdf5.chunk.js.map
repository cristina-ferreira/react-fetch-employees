{"version":3,"sources":["GenerateEmployee.jsx","DisplayEmployee.jsx","App.js","serviceWorker.js","index.js"],"names":["GenerateEmployee","_ref","selectEmployee","react_default","a","createElement","className","onClick","DisplayEmployee","employee","src","picture","medium","alt","gender","name","title","last","first","email","location","street","postcode","city","sampleEmployee","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","data","setState","results","_this3","src_DisplayEmployee","src_GenerateEmployee","getEmployee","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAUeA,SARU,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,eACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,GAAjB,mBCiBGM,EApBU,SAAAP,GAAkB,IAAfQ,EAAeR,EAAfQ,SACxB,OACMN,EAAAC,EAAAC,cAAA,OAAMC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAASE,QAAQC,OAASC,IAAI,YACxCV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACRH,EAAAC,EAAAC,cAAA,qBAAaI,EAASK,QACtBX,EAAAC,EAAAC,cAAA,mBACaI,EAASM,KAAKC,MAD3B,KACoCP,EAASM,KAAKE,KAAM,IACjDR,EAASM,KAAKG,OAErBf,EAAAC,EAAAC,cAAA,qBAAaI,EAASU,OACtBhB,EAAAC,EAAAC,cAAA,uBACiBI,EAASW,SAASC,OADnC,IAEOZ,EAASW,SAASE,SAAU,IAAKb,EAASW,SAASG,SCVzEC,EAAiB,CACtBV,OAAS,OACTC,KAAM,CACAC,MAAQ,KACRE,MAAQ,SACRD,KAAO,UAEbG,SAAU,CACJC,OAAS,oBACTE,KAAO,YACPD,SAAW,SAEjBH,MAAQ,4BACRR,QAAS,CACHC,OAAS,uDAkCFa,cA5Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXzB,SAAUe,GAHKG,6EAOL,IAAAQ,EAAAL,KAEZM,MAAM,oCACHC,KAAK,SAAAC,GAAQ,OAAMA,EAASC,SAC5BF,KAAK,SAAAG,GAEJL,EAAKM,SAAS,CACZhC,SAAW+B,EAAKE,QAAQ,wCAKvB,IAAAC,EAAAb,KACP,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAD,CAAiBnC,SAAUqB,KAAKI,MAAMzB,WACtCN,EAAAC,EAAAC,cAACwC,EAAD,CAAkB3C,eAAgB,kBAAMyC,EAAKG,yBAxBnCC,aCZEC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.5092cdf5.chunk.js","sourcesContent":["import React from 'react';\n\nconst GenerateEmployee = ({ selectEmployee }) => {\n    return (\n        <div className=\"GenerateEmployee\">\n            <button onClick={selectEmployee}>Get Employee</button>\n        </div>\n    )\n}\n\nexport default GenerateEmployee;","import React from 'react';\n\nconst  DisplayEmployee = ({ employee }) => {\n    return (\n          <div  className=\"DisplayEmployee\">\n                <img src={employee.picture.medium}  alt=\"picture\"  />\n                <ul className=\"noStyle\">\n                      <li>Gender: {employee.gender}</li>\n                      <li>\n                            Name: {employee.name.title}  {employee.name.last}{' '}\n                            {employee.name.first}\n                      </li>\n                      <li>E-mail: {employee.email}</li>\n                      <li>\n                            Location: {employee.location.street},\n                            {employee.location.postcode}{' '}{employee.location.city}\n                      </li>\n                </ul>\n          </div>\n    );\n};\n\nexport default DisplayEmployee;","import React, { Component } from 'react';\nimport './App.css';\nimport GenerateEmployee from './GenerateEmployee';\nimport DisplayEmployee from './DisplayEmployee';\n\nconst  sampleEmployee = {\n  gender:  'male',\n  name: {\n        title:  'mr',\n        first:  'mathys',\n        last:  'aubert'\n  },\n  location: {\n        street:  '9467 rue gasparin',\n        city:  'perpignan',\n        postcode:  '90208'\n  },\n  email:  'mathys.aubert@example.com',\n  picture: {\n        medium:  'https://randomuser.me/api/portraits/med/men/66.jpg'\n  }\n};\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      employee: sampleEmployee\n    };\n  }\n  \n  getEmployee() {\n    // Employee's data via fetch\n    fetch(\"https://randomuser.me/api?nat=fr\")\n      .then(response  =>  response.json())\n      .then(data  => {\n        // Once the data are retrieved, we update our state with the new data\n        this.setState({\n          employee:  data.results[0],\n        });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DisplayEmployee employee={this.state.employee} />\n        <GenerateEmployee selectEmployee={() => this.getEmployee()} />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}